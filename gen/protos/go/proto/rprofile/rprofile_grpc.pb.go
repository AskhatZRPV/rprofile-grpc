// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: proto/rprofile/rprofile.proto

package rprofilev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CompanyInfo_SearchInfo_FullMethodName = "/rusprofile.CompanyInfo/SearchInfo"
)

// CompanyInfoClient is the client API for CompanyInfo service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CompanyInfoClient interface {
	// Search Info takes inn as a input parameter and returns response
	SearchInfo(ctx context.Context, in *SearchInfoRequest, opts ...grpc.CallOption) (*SearchInfoResponse, error)
}

type companyInfoClient struct {
	cc grpc.ClientConnInterface
}

func NewCompanyInfoClient(cc grpc.ClientConnInterface) CompanyInfoClient {
	return &companyInfoClient{cc}
}

func (c *companyInfoClient) SearchInfo(ctx context.Context, in *SearchInfoRequest, opts ...grpc.CallOption) (*SearchInfoResponse, error) {
	out := new(SearchInfoResponse)
	err := c.cc.Invoke(ctx, CompanyInfo_SearchInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CompanyInfoServer is the server API for CompanyInfo service.
// All implementations must embed UnimplementedCompanyInfoServer
// for forward compatibility
type CompanyInfoServer interface {
	// Search Info takes inn as a input parameter and returns response
	SearchInfo(context.Context, *SearchInfoRequest) (*SearchInfoResponse, error)
	mustEmbedUnimplementedCompanyInfoServer()
}

// UnimplementedCompanyInfoServer must be embedded to have forward compatible implementations.
type UnimplementedCompanyInfoServer struct {
}

func (UnimplementedCompanyInfoServer) SearchInfo(context.Context, *SearchInfoRequest) (*SearchInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchInfo not implemented")
}
func (UnimplementedCompanyInfoServer) mustEmbedUnimplementedCompanyInfoServer() {}

// UnsafeCompanyInfoServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CompanyInfoServer will
// result in compilation errors.
type UnsafeCompanyInfoServer interface {
	mustEmbedUnimplementedCompanyInfoServer()
}

func RegisterCompanyInfoServer(s grpc.ServiceRegistrar, srv CompanyInfoServer) {
	s.RegisterService(&CompanyInfo_ServiceDesc, srv)
}

func _CompanyInfo_SearchInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CompanyInfoServer).SearchInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CompanyInfo_SearchInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CompanyInfoServer).SearchInfo(ctx, req.(*SearchInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CompanyInfo_ServiceDesc is the grpc.ServiceDesc for CompanyInfo service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CompanyInfo_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rusprofile.CompanyInfo",
	HandlerType: (*CompanyInfoServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SearchInfo",
			Handler:    _CompanyInfo_SearchInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/rprofile/rprofile.proto",
}
